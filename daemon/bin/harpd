#!/usr/bin/python

import harpd.daemon
import harpd.proc
import harpd.module
import optparse
import logging
import logging.config
import yaml
import signal
import sys
import os

#-----------------------------------------------------------------------------
# parse command line options {{{

parser = optparse.OptionParser(
    usage = "%prog [options]"
)

parser.add_option(
    "-c", "--config", dest = "config",
    default = "/etc/harpd/harpd.conf",
    help = "configuration file", metavar = "FILE",
)
parser.add_option(
    "-r", "--procedures", dest = "procs", default = "/etc/harpd/harpd.py",
    help = "procedures to expose", metavar = "FILE",
)
parser.add_option(
    "-l", "--logging", dest = "logging",
    help = "YAML/JSON file with logging configuration", metavar = "FILE",
)
parser.add_option(
    "-t", "--test", dest = "test", action = "store_true", default = False,
    help = "test configuration (--config, --procedures, and --logging)"
           " for correctness and exit",
)
parser.add_option(
    "-u", "--default-user", dest = "default_user", default = None,
    help = "default user to run procedures as", metavar = "USER",
)
parser.add_option(
    "-g", "--default-group", dest = "default_group", default = None,
    help = "default group to run procedures as", metavar = "GROUP",
)
parser.add_option(
    "--syslog", dest = "syslog", action = "store_true", default = False,
    help = "log to syslog instead of STDERR (overriden by --logging)",
)
parser.add_option(
    "-d", "--daemon", dest = "detach", action = "store_true", default = False,
    help = "run in background (implies --syslog)",
)
parser.add_option(
    "-p", "--pidfile", dest = "pidfile", default = None,
    help = "PID file to write", metavar = "FILE",
)

(options, args) = parser.parse_args()

if options.detach:
    options.syslog = True

if options.default_user is not None:
    try:
        options.default_user = int(options.default_user)
    except ValueError:
        pass

if options.default_group is not None:
    try:
        options.default_group = int(options.default_group)
    except ValueError:
        pass

# }}}
#-----------------------------------------------------------------------------
# config checking {{{

if options.test:
    def error(fmt, *args):
        line = fmt % args
        if not line.endswith("\n"):
            line += "\n"
        sys.stderr.write(line)
        sys.exit(1)

    try:
        with open(options.config) as f:
            configuration = yaml.safe_load(f)
    except Exception, e:
        error("error reading configuration file: %s", str(e))

    #-------------------------------------------------------
    # network configuration {{{

    if not isinstance(configuration, dict):
        error("invalid configuration: not a hash")
    if "network" not in configuration:
        error("invalid network configuration: not a hash")
    network = configuration["network"]
    if not isinstance(network.get("address", ""), (str, unicode)):
        error("invalid network.address: not a string")
    if not isinstance(network.get("port", 4306), int):
        error("invalid network.port: not an integer")
    if not isinstance(network.get("certfile"), (str, unicode)):
        error("invalid network.certfile: not a path")
    if not isinstance(network.get("keyfile"), (str, unicode)):
        error("invalid network.keyfile: not a path")
    if not os.path.isfile(network["certfile"]):
        error("invalid network.certfile: file doesn't exist")
    if not os.path.isfile(network["keyfile"]):
        error("invalid network.keyfile: file doesn't exist")

    # }}}
    #-------------------------------------------------------
    # Python runtime configuration {{{

    python = configuration.get("python", {})
    if not isinstance(python, dict):
        error("Python runtime configuration is not a hash")

    path = python.get("path")
    if path is None:
        pass # OK
    elif isinstance(path, (str, unicode)):
        sys.path.append(path)
    elif isinstance(path, (tuple, list)) and \
         all((isinstance(e, (str, unicode)) for e in path)):
        sys.path.extend(path)
    elif isinstance(path, dict):
        if "prepend" in path:
            if isinstance(path["prepend"], (str, unicode)):
                sys.path.insert(0, path["prepend"])
            elif isinstance(path["prepend"], (tuple, list)) and \
                 all((isinstance(e, (str, unicode)) for e in path["prepend"])):
                sys.path = list(path["prepend"]) + sys.path
            else:
                error("invalid python.path.prepend value")
        if "append" in path:
            if isinstance(path["append"], (str, unicode)):
                sys.path.append(path["append"])
            elif isinstance(path["append"], (tuple, list)) and \
                 all((isinstance(e, (str, unicode)) for e in path["append"])):
                sys.path.extend(path["append"])
            else:
                error("invalid python.path.append value")
    else:
        error("invalid python.path value")

    # }}}
    #-------------------------------------------------------
    # authentication {{{

    if "authentication" not in configuration:
        error("missing authentication configuration")

    authentication = configuration["authentication"]

    if not isinstance(authentication, dict):
        error("invalid authentication configuration: not a hash")

    if "module" not in authentication:
        error("authentication module not specified")
    if not isinstance(authentication["module"], (str, unicode)):
        error("invalid authentication.module: not a string")

    try:
        with harpd.module.ModuleLoader() as loader:
            authmod = loader.load(authentication["module"])
    except Exception, e:
        error("authentication module %s couldn't be loaded: %s",
              authentication["module"], str(e))

    try:
        authmod.create.__call__ # try getting `authmod.create()' function
    except AttributeError:
        error("authentication module doesn't implement proper interface")

    # }}}
    #-------------------------------------------------------
    # procedures {{{

    try:
        with harpd.module.ModuleLoader() as loader:
            loader.load("harpd.__procedures__", options.procs)
    except Exception, e:
        error("error loading procedures module: %s", str(e))

    # }}}
    #-------------------------------------------------------
    # logging {{{

    if options.logging is not None:
        try:
            with open(options.logging) as f:
                logging_config = yaml.safe_load(f)
        except Exception, e:
            error("error reading logging configuration file: %s", str(e))

        try:
            logging.config.dictConfig(logging_config)
        except Exception, e:
            error("logging configuration error: %s", str(e))

    # }}}
    #-------------------------------------------------------

    # when test execution got this far, it haven't found any errors
    sys.stderr.write("config OK\n")
    sys.exit(0)

# }}}
#-----------------------------------------------------------------------------
# configuration and environment {{{

with open(options.config) as f:
    configuration = yaml.safe_load(f)

# XXX: Python path has to be adjusted before (a) loading procedures module,
# (b) loading authentication module, and (c) configuring logging, because each
# and every of these can use custom code
path = configuration.get("python", {}).get("path")
if isinstance(path, (str, unicode)):
    sys.path.append(path)
elif isinstance(path, (tuple, list)):
    sys.path.extend(path)
elif isinstance(path, dict):
    if "prepend" in path:
        if isinstance(path["prepend"], (str, unicode)):
            sys.path.insert(0, path["prepend"])
        elif isinstance(path["prepend"], (tuple, list)):
            sys.path = list(path["prepend"]) + sys.path
    if "append" in path:
        if isinstance(path["append"], (str, unicode)):
            sys.path.append(path["append"])
        elif isinstance(path["append"], (tuple, list)):
            sys.path.extend(path["append"])

# }}}
#-----------------------------------------------------------------------------
# logging {{{

if options.logging is not None:
    with open(options.logging) as f:
        logging_config = yaml.safe_load(f)
elif options.syslog:
    logging_config = {
        "version": 1,
        "root": { "level": "INFO", "handlers": ["syslog"] },
        "formatters": {
            "syslog": { "format": "harpd[%(process)d]: %(message)s" },
        },
        "handlers": {
            "syslog": {
                "class": "logging.handlers.SysLogHandler",
                "formatter": "syslog",
                "facility": "daemon",
                "address": "/dev/log", # unix socket on Linux
            },
        },
    }
else:
    logging_config = {
        "version": 1,
        "root": { "level": "INFO", "handlers": ["stderr"] },
        "formatters": {
            "terse": { "format": "%(message)s" },
            "timestamped": {
                "format": "%(asctime)s %(message)s",
                "datefmt": "%Y-%m-%d %H:%M:%S",
            },
        },
        "handlers": {
            "stderr": {
                "class": "logging.StreamHandler",
                "formatter": "terse",
                "stream": "ext://sys.stderr",
            },
        },
    }

logging.config.dictConfig(logging_config)

# }}}
#-----------------------------------------------------------------------------
# procedures and authentication modules {{{

# XXX: loading procedures and authentication should be performed after logging
# was configured, because what if user decides to use logging within the
# procedures?
with harpd.module.ModuleLoader() as loader:
    procedures_module = loader.load("harpd.__procedures__", options.procs)
    procedures = {
        name: obj
        for (name, obj) in procedures_module.__dict__.items()
        if isinstance(obj, harpd.proc.Procedure)
    }

    if options.default_user is not None or options.default_group is not None:
        for proc in procedures.values():
            if proc.uid is None:
                proc.uid = options.default_user
            if proc.gid is None:
                proc.gid = options.default_group

    authmod = loader.load(configuration["authentication"]["module"])
    authdb = authmod.create(configuration["authentication"])

# }}}
#-----------------------------------------------------------------------------

daemon = harpd.daemon.Daemon(
    detach = options.detach,
    pidfile = options.pidfile,
)

server = harpd.daemon.SSLServer(
    host = configuration["network"].get("address"),
    port = configuration["network"].get("port", 4306),
    procs = procedures,
    authdb = authdb,
    cert_file = configuration["network"]["certfile"],
    key_file  = configuration["network"]["keyfile"],
)

signal.signal(signal.SIGHUP, server.handle_signal)
signal.signal(signal.SIGINT, server.handle_signal)
signal.signal(signal.SIGQUIT, server.handle_signal)
signal.signal(signal.SIGTERM, server.handle_signal)

daemon.confirm()

server.serve_forever()

#-----------------------------------------------------------------------------
# vim:ft=python:foldmethod=marker
